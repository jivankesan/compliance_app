from openai import AzureOpenAI
import numpy as np
from tqdm import tqdm

class ComplianceAgent:
    """
    Handles the compliance checking process:
      1. Chunk creation
      2. Embedding of chunk
      3. Vector search
      4. Prompting the model with compliance context
      5. Generating a response
    """

    def __init__(self, 
                 azure_endpoint: str, 
                 api_key: str, 
                 api_version: str, 
                 embedding_model: str, 
                 chat_model: str, 
                 system_prompt: str,
                 embeddings_manager,
                 text_processor):
        self.azure_endpoint = azure_endpoint
        self.api_key = api_key
        self.api_version = api_version
        self.embedding_model = embedding_model
        self.chat_model = chat_model
        self.system_prompt = system_prompt
        self.embeddings_manager = embeddings_manager
        self.text_processor = text_processor

        # Initialize Azure client
        self.client = AzureOpenAI(
            azure_endpoint=self.azure_endpoint,
            api_key=self.api_key,
            api_version=self.api_version
        )
    
    def create_embedding(self, chunk: str):
        response = self.client.embeddings.create(
            input=chunk,
            model=self.embedding_model
        )
        embedding = response.data[0].embedding
        return embedding

    def prompt_model(self, content: str, chunk_text: str):
        chat_prompt = [
            {
                "role": "system",
                "content": self.system_prompt
            },
            {
                "role": "user",
                "content": f"The relevant compliance context from the rules: {content}\n\nHere is the paragraph to check: {chunk_text}"
            },
        ]

        completion = self.client.chat.completions.create(
            model=self.chat_model,
            messages=chat_prompt,
            max_tokens=10000,
            temperature=0.7,
            top_p=0.95,
            frequency_penalty=0,
            presence_penalty=0,
            stop=None,
            stream=False
        )

        return completion.choices[0].message.content

    def compliance_check(self, text: str):
        """
        Main method to run compliance check on the input text.
        1. Split text into chunks
        2. For each chunk:
           - Create embedding
           - Retrieve relevant compliance context from FAISS
           - Prompt the model
        Returns a list of (chunk, comment) dicts.
        """
        chunks = self.text_processor.create_chunks(text)
        results = []

        for chunk_obj in tqdm(chunks, desc="Checking compliance"):
            chunk_text = chunk_obj.page_content
            embedding = self.create_embedding(chunk_text)
            compliance_context = self.embeddings_manager.vector_search(embedding)
            response = self.prompt_model(compliance_context, chunk_text)
            results.append({
                "chunk": chunk_text,
                "comment": response
            })
        return results